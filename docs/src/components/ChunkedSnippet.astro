---
import prettier from 'prettier';
import { Code } from 'astro:components';
import { CodeBlock } from '@interledger/docs-design-system'
const {source, chunk} = Astro.props;
import * as phpPlugin from '@prettier/plugin-php'

// Retrieve code snippet from GitHub as text
const getApiData = async () => {
  const data = await fetch(source).then((response) => response.text());
  return data;
};
const code = await getApiData();

// Split the text into an array of lines
const lines = code.split('\n');

// Initialize an array to store the delimiter objects
const delimiterArray = [];

// Iterate through the lines, extract "//@!" lines and format them into objects
let startLine = null;
for (let i = 0; i < lines.length; i++) {
  if (lines[i].trim().startsWith("//@!")) {
    if (startLine !== null) {
      // Extract the entire "start_line" and the "title"
      const startLineMatch = startLine.match(/\/\/@!(.*?)\s+\|\s+title=(.*)/);
      if (startLineMatch) {
        const entireStartLine = startLineMatch[0];
        const title = startLineMatch[2];
        
        // Create an object with "start_line," "title," and "end_line" keys
        const delimiterObject = {
          start_line: entireStartLine,
          title: title,
          end_line: lines[i]
        };
        delimiterArray.push(delimiterObject);
      }
      startLine = null;
    } else {
      startLine = lines[i];
    }
  }
}

// Initialize an array to store the extracted chunks
const codeChunkArray = [];

// Iterate through the delimiterArray and extract code chunks and titles
for (const delimiter of delimiterArray) {
  const startLine = delimiter.start_line;
  const endLine = delimiter.end_line;
  
  // Find the indices of the start and end lines in your longer text file
  const startIndex = code.indexOf(startLine);
  const endIndex = code.indexOf(endLine);

  if (startIndex !== -1 && endIndex !== -1) {
    const codeChunk = code.slice(startIndex + startLine.length, endIndex).trim();
    
    codeChunkArray.push({
      code_chunk: codeChunk,
      title: delimiter.title
    });
  }
}

// Handle zero-index situation and format code nicely
const chunkNumber = parseInt(chunk) - 1;
let rawOutput = codeChunkArray[chunkNumber]?.code_chunk;
interface LanguageConfig {
  parser: string;
  lang: string;
  plugins: any[];
};

const languageConfig: Record<string, LanguageConfig> = {
  '.php': {
    parser: 'php',
    lang: 'php',
    plugins: [phpPlugin]
  },
  '.ts': {
    parser: 'typescript',
    lang: 'ts',
    plugins: []
  }
};

const getLanguageConfig = (url: string): LanguageConfig | null => {
  const ext = Object.keys(languageConfig).find((key) => url.endsWith(key))
  return ext
    ? languageConfig[ext]
    : null
};

const { parser, lang, plugins } = getLanguageConfig(source) ?? {
  parser: '',
  lang: '',
  plugins: [],
};

let output
if (!parser || !lang || !rawOutput) {
  output = 'Code snippet not found.'
} else {
  if (lang === 'php') {
    // The PHP Prettier plugin requires the <?php opening delimiter for formatting
    rawOutput = rawOutput.trim().startsWith('<?php')
      ? rawOutput
      : `<?php\n${rawOutput}`
  }
  output = await prettier.format(rawOutput, {
    parser,
    tabWidth: 2,
    plugins
  })
  if (lang === 'php') {
    output = output.replace(/^<\?php\s*/, '')
  }
};

const codeBlockTitle = codeChunkArray[chunkNumber]?.title;
---

<CodeBlock title={codeBlockTitle} class="chunked-snippet">
  <Code code={output} lang={lang} theme="css-variables" />
  <span>Copied!</span>
  <button data-copy-button type="button">
    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke-width='1.75'>
      <path d='M3 19a2 2 0 0 1-1-2V2a2 2 0 0 1 1-1h13a2 2 0 0 1 2 1'/>
      <rect x='6' y='5' width='16' height='18' rx='1.5' ry='1.5'/>
    </svg>
    <span class="visually-hidden">Copy</span>
  </button>
  <textarea>{output}</textarea>
</CodeBlock>

<style>
  :root {
    --astro-code-foreground: var(--sl-color-white);
    --astro-code-background: var(--sl-color-gray-6);
    --astro-code-token-constant: var(--sl-color-blue-high);
    --astro-code-token-string: var(--sl-color-green-high);
    --astro-code-token-comment: var(--sl-color-gray-2);
    --astro-code-token-keyword: var(--sl-color-purple-high);
    --astro-code-token-parameter: var(--sl-color-red-high);
    --astro-code-token-function: var(--sl-color-red-high);
    --astro-code-token-string-expression: var(--sl-color-green-high);
    --astro-code-token-punctuation: var(--sl-color-gray-2);
    --astro-code-token-link: var(--sl-color-blue-high);
  }

  .chunked-snippet {
    position: relative;
  }

  .chunked-snippet pre:hover ~ button {
     opacity: 0.7;
  }

  button {
    position: absolute;
    top: 2.5em;
    right: 0.25em;
    background-color: var(--sl-color-gray-6);
    border-radius: var(--border-radius);
    border: 1px solid var(--sl-color-gray-5);
    cursor: pointer;
    padding: var(--space-2xs);
    opacity: 0;
    transition: opacity ease-in-out 150ms;
  }

  button:hover,
  button.active {
    opacity: 1;
  }

  button svg {
    height: 1em;
    width: 1em;
    stroke: var(--sl-color-gray-3);
  }

  span {
    position: absolute;
    top: 1.5em;
    right: 0.5em;
    font-size: smaller;
    display: none;
  }

  textarea {
    display: none;
  }
</style>

<script>
  const buttons = document.querySelectorAll('[data-copy-button]');
  buttons.forEach((button) => {
    const codeToCopy = (button.nextElementSibling as HTMLTextAreaElement).value
    const copyMsg = button.previousElementSibling as HTMLSpanElement

    button.addEventListener('click', () => {
      navigator.clipboard
        .writeText(codeToCopy)
        .then(() => {
          copyMsg.style.display = "block";
          (button as HTMLButtonElement).classList.add('active');

          setTimeout(() => {
            copyMsg.style.display = "none";
            (button as HTMLButtonElement).classList.remove('active');
          }, 2000);
        })
        .catch((error) => {
          const err = error as Error;
          console.error(err.name, err.message);
        })
    });
  });
</script>
